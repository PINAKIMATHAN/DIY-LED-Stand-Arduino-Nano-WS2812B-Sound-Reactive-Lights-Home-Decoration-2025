#include <FastLED.h>

FASTLED_USING_NAMESPACE

#define NUM_LEDS         288 // Total Number of LEDs
#define DATA_PIN          6 // Connect your Addressable LED Strip to this Pin.
#define LED_TYPE     WS2812 // WS2801, WS2811, WS2812B, LPD8806, TM1809, etc...
#define COLOR_ORDER     RGB // Default Color Order
#define ENVELOPE_PIN     A0 // Envelope Pin of the Sparkfun Sound Detector Module

#define BRIGHTNESS      200 // Min: 0, Max: 255
#define SATURATION      150 // Min: 0, Max: 255
#define MIN_VAL          10 // Min: 0, Max: 75
#define MAX_VAL         150 // Min: 75, Max: 750
#define HUE_INIT         10 // < 255
#define HUE_CHANGE        2 // < 255

/*============= SELECT STYLE =============*/
/*                                        */
/*    0   -->   LinearFlowing (BEST)      */
/*    1   -->   LinearReactive            */
/*    2   -->   BrightnessReactive        */
/*    3   -->   CentreProgressive         */
/*    4   -->   EdgeProgressive           */
/*    5   -->   BouncingBalls              */
/*    6   -->   PulseEffect                */
/*    7   -->   ColorWaveEffect            */
/*    8   -->   RandomSparkleEffect        */
/*    9   -->   ColorStrobeEffect          */
/*   10   -->   FireEffect                 */
/*   11   -->   ColorChaseEffect           */
/*   12   -->   RainbowCycleEffect         */
/*   13   -->   ColorWipeEffect            */
/*   14   -->   TwinkleEffect              */
/*   15   -->   MeteorEffect               */
/*   16   -->   FadeEffect                 */
/*   17   -->   CylonEffect                */
/*   18   -->   StrobeEffect               */
/*   19   -->   LarsonScannerEffect        */
/*   20   -->   ColorBounceEffect          */
/*   21   -->   RunningLightsEffect        */
/*   22   -->   NoiseEffect                */
/* */          int STYLE = 0;          /* */
/*                                        */
/*========================================*/

#define VOLUME_UP_PIN A1
#define VOLUME_DOWN_PIN A2
#define EFFECT_SWITCH_PIN 2

CRGB leds[NUM_LEDS];
byte dynamicHue = HUE_INIT;
int analogVal = 0;
int val = 0;
int volume = 0;
int lastEffect = -1; // Track the last selected effect

void setup() {
  Serial.begin(9600); // Initialize serial communication
  pinMode(ENVELOPE_PIN, INPUT);
  pinMode(VOLUME_UP_PIN, INPUT);
  pinMode(VOLUME_DOWN_PIN, INPUT);
  pinMode(EFFECT_SWITCH_PIN, INPUT_PULLUP); // Enable internal pull-up resistor for the switch pin
  
  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);

  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB::Black;
  }

  // Update the LED Strip
  FastLED.show(); 
}

void loop() {
  analogVal = analogRead(ENVELOPE_PIN);
  Serial.print("Analog Value: ");
  Serial.println(analogVal);

  if(analogVal > MAX_VAL)
    analogVal = MAX_VAL;

  if(analogVal < MIN_VAL)
    analogVal = MIN_VAL;

  // Read volume adjustments
  int volumeUp = analogRead(VOLUME_UP_PIN);
  int volumeDown = analogRead(VOLUME_DOWN_PIN);
  volume = map(volumeUp - volumeDown, -512, 512, 0, 255);

  // Read effect change switch
  int currentEffect = digitalRead(EFFECT_SWITCH_PIN);
  
  // If the switch is pressed and the last selected effect is different from the current one
  if (currentEffect == LOW && lastEffect != currentEffect) {
    STYLE = (STYLE + 1) % 23; // Increment the effect style
  }
  
  // Store the current effect for comparison in the next loop iteration
  lastEffect = currentEffect;

  switch (STYLE) {
    case 1:
      LinearReactive(analogVal);
      break;
    case 2:
      BrightnessReactive(analogVal);
      break;
    case 3:
      CentreProgressive(analogVal);
      break;
    case 4:
      EdgeProgressive(analogVal);
      break;
    case 5:
      BouncingBalls(analogVal);
      break;
    case 6:
      PulseEffect(analogVal);
      break;
    case 7:
      ColorWaveEffect(analogVal);
      break;
    case 8:
      RandomSparkleEffect(analogVal);
      break;
    case 9:
      ColorStrobeEffect(analogVal);
      break;
    case 10:
      FireEffect(analogVal);
      break;
    case 11:
      ColorChaseEffect(analogVal);
      break;
    case 12:
      RainbowCycleEffect(analogVal);
      break;
    case 13:
      ColorWipeEffect(analogVal);
      break;
    case 14:
      TwinkleEffect(analogVal);
      break;
    case 15:
      MeteorEffect(analogVal);
      break;
    case 16:
      FadeEffect(analogVal);
      break;
    case 17:
      CylonEffect(analogVal);
      break;
    case 18:
      StrobeEffect(analogVal);
      break;
    case 19:
      LarsonScannerEffect(analogVal);
      break;
    case 20:
      ColorBounceEffect(analogVal);
      break;
    case 21:
      RunningLightsEffect(analogVal);
      break;
    case 22:
      NoiseEffect(analogVal);
      break;
    default:
      LinearFlowing(analogVal);
      break;
  }
  
  // Update the LED Strip
  FastLED.show();
}

void LinearFlowing(int analogVal) {
  val = map(analogVal, MIN_VAL, MAX_VAL, 0, BRIGHTNESS);
  int dynamicDelay = map(analogVal, MIN_VAL, MAX_VAL, 20, 1);
  
  for (int i = 0; i < NUM_LEDS-1; i++) {
    leds[i] = leds[i+1];
  }

  leds[NUM_LEDS-1] = CHSV(dynamicHue += HUE_CHANGE, SATURATION, val);

  delay(dynamicDelay);
}

void LinearReactive(int analogVal) {
  val = map(analogVal, 0, MAX_VAL+1, 0, NUM_LEDS);

  for(int i = 0; i < NUM_LEDS; i++) {
    if (i <= val)
      leds[i] = CHSV(HUE_INIT+(HUE_CHANGE*i), SATURATION, BRIGHTNESS);
    else
      leds[i].nscale8(10);
  }
}

void BrightnessReactive(int analogVal) {
  val = map(analogVal, MIN_VAL, MAX_VAL, 0, BRIGHTNESS);
  
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(HUE_INIT+(HUE_CHANGE*i), SATURATION, val);
  }
}
void CentreProgressive(int analogVal) {
  val = map(analogVal, MIN_VAL, MAX_VAL, 0, NUM_LEDS/2);

  for(int i = 0; i < NUM_LEDS/2; i++) {
    if (i <= val) {
      leds[(NUM_LEDS/2)+i] = CHSV(HUE_INIT+(HUE_CHANGE*i), SATURATION, BRIGHTNESS);
      leds[(NUM_LEDS/2)-i] = CHSV(HUE_INIT+(HUE_CHANGE*i), SATURATION, BRIGHTNESS);
    } else {
      leds[(NUM_LEDS/2)+i].nscale8(10);
      leds[(NUM_LEDS/2)-i].nscale8(10);
    }
  }
}

void EdgeProgressive(int analogVal) {
  val = map(analogVal, 0, MAX_VAL, 0, NUM_LEDS/2);

  for(int i = 0; i < NUM_LEDS/2; i++) {
    if (i <= val) {
      leds[i] = CHSV(HUE_INIT+(HUE_CHANGE*i), SATURATION, BRIGHTNESS);
      leds[NUM_LEDS-i] = CHSV(HUE_INIT+(HUE_CHANGE*i), SATURATION, BRIGHTNESS);
    } else {
      leds[i].nscale8(10);
      leds[NUM_LEDS-i].nscale8(10);
    }
  }
}

void BouncingBalls(int analogVal) {
  Serial.println("Bouncing Balls");
  fadeToBlackBy(leds, NUM_LEDS, 20);
  byte count = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  Serial.print("Ball Count: ");
  Serial.println(count);
  for (int i = 0; i < count; i++) {
    int pos = beatsin16(i + 7, 0, NUM_LEDS - 1);
    int vel = beatsin16(i + 13, 1, 6);

    // Adjust velocity based on analog value
    vel = map(analogVal, MIN_VAL, MAX_VAL, 1, 6);

    // Adjust hue based on analog value
    byte hue = dynamicHue + i * (255 / count);
    CHSV ballColor = CHSV(hue, SATURATION, BRIGHTNESS);

    leds[pos] += ballColor;

    // Ensure that the next position is within bounds
    if (pos + vel < NUM_LEDS && pos + vel >= 0)
      leds[pos + vel] += ballColor / 2; // Reduce brightness for the following LED
  }
  delay(30);
}

void PulseEffect(int analogVal) {
  val = map(analogVal, MIN_VAL, MAX_VAL, 0, BRIGHTNESS);
  fill_solid(leds, NUM_LEDS, CHSV(dynamicHue, SATURATION, val));
  delay(30);
}

void ColorWaveEffect(int analogVal) {
  int waveSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  fill_rainbow(leds, NUM_LEDS, dynamicHue, waveSpeed);
  dynamicHue += HUE_CHANGE;
  delay(30);
}

void RandomSparkleEffect(int analogVal) {
  int sparkleCount = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  for (int i = 0; i < sparkleCount; i++) {
    int pixel = random(NUM_LEDS);
    leds[pixel] = CHSV(dynamicHue, SATURATION, random(BRIGHTNESS));
  }
  delay(50);
}

void ColorStrobeEffect(int analogVal) {
  int strobeFrequency = map(analogVal, MIN_VAL, MAX_VAL, 10, 100);
  if (millis() % strobeFrequency == 0) {
    fill_solid(leds, NUM_LEDS, CHSV(random(255), SATURATION, BRIGHTNESS));
  } else {
    fill_solid(leds, NUM_LEDS, CRGB::Black);
  }
  delay(30);
}

void FireEffect(int analogVal) {
  int flickerAmount = map(analogVal, MIN_VAL, MAX_VAL, 0, 30);
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = HeatColor(flickerAmount * 3 + random(50));
  }
  delay(30);
}

void ColorChaseEffect(int analogVal) {
  int chaseSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  int pos = beatsin16(chaseSpeed, 0, NUM_LEDS - 1);
  leds[pos] = CHSV(dynamicHue, SATURATION, BRIGHTNESS);
  dynamicHue += HUE_CHANGE;
  delay(30);
}

void RainbowCycleEffect(int analogVal) {
  int cycleSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  fill_rainbow(leds, NUM_LEDS, dynamicHue, 255 / NUM_LEDS);
  dynamicHue += HUE_CHANGE;
  FastLED.show();
  delay(cycleSpeed);
}

void ColorWipeEffect(int analogVal) {
  val = map(analogVal, MIN_VAL, MAX_VAL, 0, BRIGHTNESS);
  int wipeSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  static int position = 0;
  leds[position] = CHSV(dynamicHue, SATURATION, val);
  FastLED.show();
  position = (position + 1) % NUM_LEDS;
  delay(wipeSpeed);
}

void TwinkleEffect(int analogVal) {
  int twinkleCount = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  for (int i = 0; i < twinkleCount; i++) {
    int pixel = random(NUM_LEDS);
    leds[pixel] = CHSV(dynamicHue, SATURATION, BRIGHTNESS);
  }
  FastLED.show();
  delay(100);
  fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void MeteorEffect(int analogVal) {
  int meteorSize = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  static int position = 0;
  leds[position] = CHSV(dynamicHue, SATURATION, BRIGHTNESS);
  for (int i = 1; i <= meteorSize; i++) {
    int tailBrightness = map(i, 1, meteorSize, BRIGHTNESS / 5, BRIGHTNESS);
    if (position - i >= 0)
      leds[position - i] = CHSV(dynamicHue, SATURATION, tailBrightness);
  }
  FastLED.show();
  delay(50);
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  position = (position + 1) % NUM_LEDS;
}

void FadeEffect(int analogVal) {
  val = map(analogVal, MIN_VAL, MAX_VAL, 0, BRIGHTNESS);
  int fadeSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  static int brightness = BRIGHTNESS;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(dynamicHue, SATURATION, brightness);
  }
  FastLED.show();
  brightness = (brightness + val) % (BRIGHTNESS + 1);
  delay(fadeSpeed * 10);
}

void CylonEffect(int analogVal) {
  int eyeSize = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  int eyeSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  int pos = beatsin16(eyeSpeed, 0, NUM_LEDS - 1);
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  for (int i = 0; i < eyeSize; i++) {
    int index = pos + i;
    if (index >= 0 && index < NUM_LEDS)
      leds[index] = CRGB::Red;
    index = pos - i;
    if (index >= 0 && index < NUM_LEDS)
      leds[index] = CRGB::Red;
  }
  FastLED.show();
  delay(30);
}

void StrobeEffect(int analogVal) {
  int strobeSpeed = map(analogVal, MIN_VAL, MAX_VAL, 10, 100);
  if (millis() % strobeSpeed == 0) {
    fill_solid(leds, NUM_LEDS, CRGB::White);
  } else {
    fill_solid(leds, NUM_LEDS, CRGB::Black);
  }
  delay(30);
}

void LarsonScannerEffect(int analogVal) {
  int scanSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  int eyeSize = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  int pos = beatsin16(scanSpeed, 0, NUM_LEDS - 1);
  for (int i = 0; i < eyeSize; i++) {
    int index = pos + i;
    if (index >= 0 && index < NUM_LEDS)
      leds[index] = CHSV(dynamicHue, SATURATION, BRIGHTNESS / (i + 1));
    index = pos - i;
    if (index >= 0 && index < NUM_LEDS)
      leds[index] = CHSV(dynamicHue, SATURATION, BRIGHTNESS / (i + 1));
  }
  FastLED.show();
  delay(30);
}

void ColorBounceEffect(int analogVal) {
  int bounceSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  int bouncerPos = beatsin16(bounceSpeed, 0, NUM_LEDS - 1);
  int bouncerSize = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  for (int i = 0; i < bouncerSize; i++) {
    int index = bouncerPos + i;
    if (index >= 0 && index < NUM_LEDS)
      leds[index] = CHSV(dynamicHue, SATURATION, BRIGHTNESS);
    index = bouncerPos - i;
    if (index >= 0 && index < NUM_LEDS)
      leds[index] = CHSV(dynamicHue, SATURATION, BRIGHTNESS);
  }
  FastLED.show();
  delay(30);
}

void RunningLightsEffect(int analogVal) {
  int chaseSpeed = map(analogVal, MIN_VAL, MAX_VAL, 1, 10);
  int decayRate = map(analogVal, MIN_VAL, MAX_VAL, 10, 100);
  int startPosition = beatsin16(chaseSpeed, 0, NUM_LEDS - 1);
  for (int i = 0; i < NUM_LEDS; i++) {
    int intensity = (255 * (sin((int)(i * 10 + millis() / 100.0)) + 1)) / 2;
    leds[i] = CHSV(dynamicHue, SATURATION, intensity);
    if (startPosition > 0 && startPosition < NUM_LEDS)
      leds[startPosition] = CHSV(dynamicHue, SATURATION, BRIGHTNESS);
    startPosition = (startPosition + 1) % NUM_LEDS;
    FastLED.show();
    delay(decayRate);
  }
}

void NoiseEffect(int analogVal) {
  int noiseSpeed = map(analogVal, MIN_VAL, MAX_VAL, 10, 100);
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(dynamicHue, SATURATION, random(BRIGHTNESS));
  }
  FastLED.show();
  delay(noiseSpeed);
}

// Include the rest of the effect functions here...
